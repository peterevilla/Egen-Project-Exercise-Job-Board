[{"C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\jobPage\\JobPage.js":"1","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\index.js":"2","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\navBar\\NavBar.js":"3","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\searchBar\\SearchBar.js":"4","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\mainPage\\MainPage.js":"5","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\state\\types\\index.js":"6"},{"size":896,"mtime":1608123762029,"results":"7","hashOfConfig":"8"},{"size":917,"mtime":1608062204464,"results":"9","hashOfConfig":"8"},{"size":1260,"mtime":1608123939580,"results":"10","hashOfConfig":"8"},{"size":1718,"mtime":1608125678606,"results":"11","hashOfConfig":"8"},{"size":2039,"mtime":1608126440543,"results":"12","hashOfConfig":"8"},{"size":132,"mtime":1608042112962,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"dtrg8n",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\jobPage\\JobPage.js",["30"],"C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\index.js",[],["31","32"],"C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\navBar\\NavBar.js",[],["33","34"],"C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\searchBar\\SearchBar.js",["35"],"import React, {useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport getJobsSearch from '../../state/actions/fromSearch';\r\nimport getJobs from '../../state/actions/getJobs'\r\nimport '../../styles.scss';\r\n\r\nconst SearchBar = ({getJobsSearch, status}) => {\r\n    const [ params, setParams] = useState({page: 0, description: \"\", location: \"\", type: \"true\"})\r\n\r\n\r\n    const searchHandle = e => {\r\n        setParams({ ...params, [e.target.name]: e.target.value});\r\n        \r\n      };\r\n      const submitHandler = (e) => {\r\n          e.preventDefault()\r\n          getJobsSearch(params)\r\n        \r\n      };\r\n    return (\r\n        <form  onSubmit={submitHandler}> \r\n            <input\r\n            type=\"text\"\r\n            name=\"description\"\r\n            value={params.description}\r\n            placeholder=\"Filter by title, companies, description...\"\r\n            onChange={searchHandle}\r\n            className=\"form\"\r\n          \r\n\r\n            ></input>\r\n            <input\r\n            type=\"text\"\r\n             name=\"location\"\r\n             value={params.location}\r\n             placeholder=\"Location\"\r\n             onChange={searchHandle} \r\n             className=\"form\" \r\n\r\n            ></input>\r\n            {/* <input type=\"radio\"\r\n            checked={params.type.value === \"true\"}\r\n            value={params.type}\r\n            placeholder=\"Full time only\"\r\n            onChange={searchHandle}\r\n            ></input> */}\r\n            <button className=\"search-btn\"  type=\"submit\" >Search</button>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    status: state.jobs.getJobsStatus, \r\n  });\r\n  \r\n  export default connect(mapStateToProps, { getJobsSearch})(SearchBar);\r\n","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\components\\mainPage\\MainPage.js",["36","37","38"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport getJobs from \"../../state/actions/getJobs\";\r\nimport JobCard from \"../jobCard/JobCard\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport '../../styles.scss';\r\n\r\nconst MainPage = ({ status, jobs, getJobs }) => {\r\n  const [isBottom, setIsBottom] = useState(false);\r\n//   const [pageNumber, setPageNumber] = useState(1)\r\n  const pageNumber = useRef(1)\r\n\r\n  useEffect(() => {\r\n    getJobs({ page: pageNumber.current, description: \"\", location: \"\", type: \"true\" });\r\n    pageNumber.current = pageNumber.current + 1\r\n    setIsBottom(false);\r\n  }, []);\r\n  \r\n  function handleScroll() {\r\n    const scrollTop =\r\n      (document.documentElement && document.documentElement.scrollTop) ||\r\n      document.body.scrollTop;\r\n    const scrollHeight =\r\n      (document.documentElement && document.documentElement.scrollHeight) ||\r\n      document.body.scrollHeight;\r\n    if (scrollTop + window.innerHeight + 50 >= scrollHeight) {\r\n      setIsBottom(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n    if (isBottom) {\r\n    \r\n      getJobs({ page: pageNumber.current, description: \"\", location: \"\", type: \"true\" });\r\n    \r\n      \r\n    }\r\n    \r\n  }, [isBottom]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\nconsole.log(pageNumber.current)\r\n  return (\r\n    <div>\r\n        <div className=\"main\">\r\n      {jobs.map((job) => (\r\n          \r\n        <Link style={{ textDecoration: 'none' }} to={`/${job.id}`}>\r\n          <JobCard key={job.id} job={job} />\r\n        </Link>\r\n      ))}\r\n      </div>\r\n      {status === \"loading\" && <p>loading jobs...</p>}\r\n      {jobs.length === 0 && status !==\"loading\" && <p>No jobs found</p>}\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  jobs: state.jobs.jobs,\r\n  status: state.jobs.getJobsStatus,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getJobs })(MainPage);\r\n","C:\\Users\\IT2\\Desktop\\Lambda\\Egen-Project-Exercise-Job-Board\\src\\state\\types\\index.js",[],{"ruleId":"39","severity":1,"message":"40","line":14,"column":36,"nodeType":"41","endLine":14,"endColumn":69},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":5,"column":16,"nodeType":"50","messageId":"51","endLine":5,"endColumn":21},{"ruleId":"53","severity":1,"message":"54","line":17,"column":6,"nodeType":"55","endLine":17,"endColumn":8,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"54","line":40,"column":6,"nodeType":"55","endLine":40,"endColumn":16,"suggestions":"57"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"no-unused-vars","'getJobs' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getJobs'. Either include it or remove the dependency array. If 'getJobs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [getJobs]",{"range":"66","text":"67"},"Update the dependencies array to be: [getJobs, isBottom]",{"range":"68","text":"69"},[656,658],"[getJobs]",[1264,1274],"[getJobs, isBottom]"]